i = i + dt
Sys.sleep(refresh)
}
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = i + dt
Sys.sleep(refresh)
}
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = i + dt
#Sys.sleep(refresh)
}
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
print(motionPlot)
i = i + dt
#Sys.sleep(refresh)
}
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
print(motionPlot)
i = i + dt
Sys.sleep(refresh)
}
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
print(motionPlot)
i = i + dt
}
# all unit SI
# Start with electrons
# Number of particles
n <- 50
#Mass of particles
m <- 9.109 * 10**-31
m_std <- 0
# charge of particles
e <- 1.602 * 10**-19
e_std <- 0
# average starting speed
speed <- 1
#starting speed std
speed_Std <- .05
# Box width
BoxW <- 1
BoxH <- 1
# time between snapshots
dt <- .01
# total time to run simulation
totalTime <- 5
#refresh rate of graphs in seconds
refresh <- .5
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
print(motionPlot)
i = i + dt
}
install.packages("gapminder")
install.packages("gganimate")
install.packages("gifski")
install.packages("magick")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(gganimate)
library(gifski)
library(magick)
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
"images", paste("motion_", names[j], ".jpg", sep = ""))
jpg(file=mypath)
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
"images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file=mypath)
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
"images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file=mypath)
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
library(dplyr)
library(ggplot2)
library(tidyverse)
library(gapminder)
library(gganimate)
library(gifski)
library(magick)
# all unit SI
# Start with electrons
# Number of particles
n <- 50
#Mass of particles
m <- 9.109 * 10**-31
m_std <- 0
# charge of particles
e <- 1.602 * 10**-19
e_std <- 0
# average starting speed
speed <- 1
#starting speed std
speed_Std <- .05
# Box width
BoxW <- 1
BoxH <- 1
# time between snapshots
dt <- .01
# total time to run simulation
totalTime <- 5
#refresh rate of graphs in seconds
refresh <- .5
set.seed(1)
mass_Vec <- rnorm(n = n, mean = m, sd = m_std)
charge_Vec <- rnorm(n = n, mean = e, sd = e_std)
speed_Vec <- rnorm(n, mean = speed, sd = speed_Std)
xVelPer <- runif(n, 0, 1)
xPos <- runif(n, 0, .9 * BoxW)
yPos <- runif(n, 0, .9 * BoxH)
xDir <-sample(c(-1,1), n, replace = TRUE)
yDir <- sample(c(-1,1), n, replace = TRUE)
particles_Start <- data.frame(mass_Vec, charge_Vec, speed_Vec, xVelPer, xPos, yPos, xDir, yDir)
particles_Start %>%
mutate(xVel = (speed_Vec * xVelPer)* xDir) %>%
mutate(yVel = (speed_Vec * (1 - xVelPer))* yDir) -> partStVel
g <- ggplot(partStVel, aes(x = xPos, y = yPos))
startPlot <- g + geom_point()
startPlot
partStVel %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xDir = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xDir * -1,
xDir)) %>%
mutate(yDir = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yDir * -1,
yDir)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
"images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file=mypath)
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
#mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
#                  "images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file = paste("motion_", names[j], ".jpg", sep = ""))
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
setwd("C:/Users/jmeis/Desktop/Python/ParticleBox")
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
#mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
#                  "images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file = paste("motion_", names[j], ".jpg", sep = ""))
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
#mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
#                  "images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file = paste("motion_", names[j], ".jpg", sep = ""))
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
i = 0
j = 1
names <- 1:1000
while (i <= totalTime) {
partsInMotion %>%
# If too close to wall they bounce by changing the velocity direction
mutate(xVel = ifelse(
xPos <= .05 * BoxW | xPos >= .95 * BoxW,
xVel * -1,
xVel)) %>%
mutate(yVel = ifelse(
yPos <= .05 * BoxW | yPos >= .95 * BoxW,
yVel * -1,
yVel)) %>%
mutate(xPos = xPos + xVel * dt) %>%
mutate(yPos = yPos + yVel * dt) -> partsInMotion
#mypath <- file.path("C:", "Users", "jmeis", "Desktop", "Python", "ParticleBox",
#                  "images", paste("motion_", names[j], ".jpg", sep = ""))
jpeg(file = paste("motion_", names[j], ".jpeg", sep = ""))
g <- ggplot(partsInMotion, aes(x = xPos, y = yPos))
motionPlot <- g + geom_point()
motionPlot
dev.off()
i = i + dt
j= j + 1
}
write.csv(c(1, 2, 3), file = "mydata.csv")
write.csv(c(1, 2, 3), file = "./mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeis/Desktop/Python/ParticleBox/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeis/Desktop/Python/ParticleBox/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeisenh/Desktop/Python/ParticleBox/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeis/Desktop/Python/ParticleBox/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeisenh/Desktop/Python/ParticleBox/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeisenh/Desktop/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeis/mydata.csv")
write.csv(c(1, 2, 3), file = "C:/Users/jmeis/Desktop/mydata.csv")
